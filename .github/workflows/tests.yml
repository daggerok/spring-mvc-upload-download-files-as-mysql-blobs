name: tests
on:
  push:
  #pull_request:
  #  branches: [ master, main ]
  #  paths:
  #  - '*.md'
  #  - '*.adoc'
  #  - '*.js*'
  workflow_dispatch:
    inputs:
      trigger:
        description: Type m to triggre manual jobs
        required: false
        default: ''
env:
  NODE_VERSION: 17.7.2
jobs:
  updates:
    name: updates
    #See reference: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#functions
    #manual job definition:
    if: startsWith(github.event.inputs.trigger, 'm')
      || startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11,17,18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          # 'temurin' 'zulu' 'adopt' 'adopt-hotspot' 'adopt-openj9' 'liberica' 'microsoft'
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
      - run: cd $GITHUB_WORKSPACE ; ./mvnw versions:display-property-updates
  tests:
    name: unit tests java-${{ matrix.java }}
    #See reference: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#functions
    #automatic job definition:
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11,17,18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
      - run: docker pull --platform linux/x86_64 mysql:8.0.29
      - run: cd $GITHUB_WORKSPACE ; ./mvnw
  app-0-content-as-byte-array-integration-tests:
    name: app-0-content-as-byte-array integration tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11,17,18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml') }}
      - run: sudo apt install -y httpie
      - run: docker version
      - run: docker pull --platform linux/x86_64 mysql:8.0.29
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-0-content-as-byte-array
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: docker run --rm --name mysql
                        --platform linux/x86_64
                        -e MYSQL_USER=user -e MYSQL_PASSWORD=password
                        -e MYSQL_DATABASE=database -e MYSQL_ROOT_PASSWORD=password
                        --health-cmd='mysqladmin ping -h 127.0.0.1 -u $MYSQL_USER --password=$MYSQL_PASSWORD || exit 1'
                        --health-start-period=1s --health-retries=1111 --health-interval=1s --health-timeout=5s
                        -p 3306:3306
                        -d mysql:8.0.29
      - run: while [[ $(docker ps -n 1 -q -f health=healthy -f status=running | wc -l) -lt 1 ]] ; do sleep 5 ; echo -n '.' ; done ; sleep 15 ; echo 'MySQL is ready'
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-0-content-as-byte-array spring-boot:start
      - run: http --ignore-stdin get  :8000
      - run: http --ignore-stdin post :8000 name=README.md content=Hello\ app-0-content-as-byte-array
      #- run: cd $GITHUB_WORKSPACE ; http --ignore-stdin -f post :8080 filename="$(date)-README.md" file@README.md
      - run: http --ignore-stdin get  :8000
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-0-content-as-byte-array spring-boot:stop
      - run: docker stop mysql
  app-1-content-as-string-integration-tests:
    name: app-1-content-as-string integration tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11,17,18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml') }}
      - run: sudo apt install -y httpie docker-compose
      - run: docker-compose version
      - run: docker version
      - run: docker pull --platform linux/x86_64 mysql:8.0.29
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-1-content-as-string
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: ./mvnw -f docker -P down ; ./mvnw -f docker -P up
      - run: >
          n=1 ;
          while [[ $(docker ps -n ${n} -q -f health=healthy -f status=running | wc -l) -lt ${n} ]] ; do
            sleep 5 ;
            echo -ne '.' ;
          done ;
          sleep 15 ;
          echo 'MySQL is ready' ;
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-1-content-as-string spring-boot:start
      - run: http --ignore-stdin get  :8001
      - run: http --ignore-stdin post :8001 name=README.md content='Hello app-1-content-as-string'
      - run: http --ignore-stdin get  :8001
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-1-content-as-string spring-boot:stop
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f docker -P down
  app-2-upload-file-integration-tests:
    name: app-2-upload-file integration tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11,17,18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml') }}
      - run: sudo apt install -y httpie docker-compose
      - run: docker-compose version
      - run: docker version
      - run: docker pull mysql:8.0.29
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-2-upload-file
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: ./mvnw -f docker -P down ; ./mvnw -f docker -P up
      - run: while [[ $(docker ps -n 1 -q -f health=healthy -f status=running | wc -l) -lt 1 ]] ; do sleep 5 ; echo -n '.' ; done ; sleep 15 ; echo 'MySQL is ready'
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-2-upload-file spring-boot:start
      - run: http --ignore-stdin    get  :8002
      - run: http --ignore-stdin -f post :8002/upload file@$GITHUB_WORKSPACE/pom.xml
      - run: http --ignore-stdin -f post :8002/upload file@$GITHUB_WORKSPACE/README.md
      - run: http --ignore-stdin    get  :8002
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-2-upload-file spring-boot:stop
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f docker -P down
  app-3-download-file-integration-tests:
    name: app-3-download-file integration tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11,17,18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml') }}
      - run: sudo apt install -y httpie docker-compose
      - run: docker-compose version
      - run: docker version
      - run: docker pull mysql:8.0.29
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-3-download-file
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: ./mvnw -f docker -P down ; ./mvnw -f docker -P up
      - run: while [[ $(docker ps -n 1 -q -f health=healthy -f status=running | wc -l) -lt 1 ]] ; do sleep 5 ; echo -n '.' ; done ; sleep 15 ; echo 'MySQL is ready'
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-3-download-file spring-boot:start
      - run: http --ignore-stdin    get  :8003
      - run: http --ignore-stdin -f post :8003/upload file@$GITHUB_WORKSPACE/README.md
      - run: http --ignore-stdin -f post :8003/upload file@$GITHUB_WORKSPACE/pom.xml
      - run: http --ignore-stdin    get  :8003
      - run: mkdir $GITHUB_WORKSPACE/target
      - run: cd $GITHUB_WORKSPACE/target && http --ignore-stdin --download ":8003/download?id=2"
      - run: http --ignore-stdin -f get ":8003/download?id=1" > "$GITHUB_WORKSPACE/target/README.md"
      - run: ls -lah $GITHUB_WORKSPACE/target
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-3-download-file spring-boot:stop
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f docker -P down
  app-4-binary-files-integration-tests:
    name: app-4-binary-files integration tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11,17,18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml') }}
      - run: sudo apt install -y httpie docker-compose
      - run: docker-compose version
      - run: docker version
      - run: docker pull mysql:8.0.29
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-4-binary-files
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: ./mvnw -f docker -P down ; ./mvnw -f docker -P up
      - run: while [[ $(docker ps -n 1 -q -f health=healthy -f status=running | wc -l) -lt 1 ]] ; do sleep 5 ; echo -n '.' ; done ; sleep 15 ; echo 'MySQL is ready'
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-4-binary-files spring-boot:start
      - run: http --ignore-stdin    get  :8004
      - run: http --ignore-stdin -f post :8004/upload file@$GITHUB_WORKSPACE/README.md
      - run: http --ignore-stdin -f post :8004/upload file@$GITHUB_WORKSPACE/pom.xml
      - run: http --ignore-stdin    get  :8004
      - run: mkdir $GITHUB_WORKSPACE/target
      - run: cd $GITHUB_WORKSPACE/target && http --ignore-stdin --download :8004/download\?id=2
      - run: http --ignore-stdin -f get :8004/download\?id=1 > "$GITHUB_WORKSPACE/target/README.md"
      - run: ls -lah $GITHUB_WORKSPACE/target
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app-4-binary-files spring-boot:stop
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f docker -P down
  app-integration-tests:
    name: app integration tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11,17,18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml') }}
      - run: sudo apt install -y httpie docker-compose
      - run: docker-compose version
      - run: docker version
      - run: docker pull mysql:8.0.29
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: ./mvnw -f docker -P down ; ./mvnw -f docker -P up
      - run: while [[ $(docker ps -n 1 -q -f health=healthy -f status=running | wc -l) -lt 1 ]] ; do sleep 5 ; echo -n '.' ; done ; sleep 15 ; echo 'MySQL is ready'
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app spring-boot:start
      - run: http --ignore-stdin    get  :8080
      - run: http --ignore-stdin -f post :8080/upload file@$GITHUB_WORKSPACE/README.md
      - run: http --ignore-stdin -f post :8080/upload file@$GITHUB_WORKSPACE/pom.xml
      - run: http --ignore-stdin    get  :8080
      - run: mkdir $GITHUB_WORKSPACE/target
      - run: cd $GITHUB_WORKSPACE/target && http --ignore-stdin --download ":8080/download?id=2"
      - run: http --ignore-stdin -f get ":8080/download?id=1" > "$GITHUB_WORKSPACE/target/README.md"
      - run: ls -lah $GITHUB_WORKSPACE/target
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f apps/app spring-boot:stop
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f docker -P down
